#
# this is the release workflow that is triggered by a push to the main branch
#
# it will
# - update the versions of all packages
# - build the project
# - @TODO test the project
# - create a releases for all packages that have changed and add its artifacts to the release
# - gather the workflow artifacts
#
name: 'release'

on:
  push:
    branches:
      - main

permissions:
  # write-all is too much, but we need to write to packages
  # see https://github.com/orgs/community/discussions/57724 for more info
  contents: write
  packages: write
  attestations: write
  id-token: write

jobs:
  # devcontainer:
  #   uses: ./.github/workflows/build-devcontainer-image.yaml
  #   secrets: inherit

  release:
    runs-on: ubuntu-latest
    # needs:
    #   - devcontainer
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}
    if: "!contains(github.event.head_commit.message, 'skip release')"
    steps:
      - name: checkout branch from git
        uses: actions/checkout@v4

      - name: Dump GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo "$GITHUB_CONTEXT"
      - name: Dump job context
        env:
          JOB_CONTEXT: ${{ toJson(job) }}
        run: echo "$JOB_CONTEXT"
      - name: Dump steps context
        env:
          STEPS_CONTEXT: ${{ toJson(steps) }}
        run: echo "$STEPS_CONTEXT"
      - name: Dump runner context
        env:
          RUNNER_CONTEXT: ${{ toJson(runner) }}
        run: echo "$RUNNER_CONTEXT"
      - name: Dump strategy context
        env:
          STRATEGY_CONTEXT: ${{ toJson(strategy) }}
        run: echo "$STRATEGY_CONTEXT"
      - name: Dump matrix context
        env:
          MATRIX_CONTEXT: ${{ toJson(matrix) }}
        run: echo "$MATRIX_CONTEXT"

      - name: Show default environment variables
        run: |
          echo "The job_id is: $GITHUB_JOB"   # reference the default environment variables
          echo "The id of this action is: $GITHUB_ACTION"   # reference the default environment variables
          echo "The run id is: $GITHUB_RUN_ID"
          echo "The GitHub Actor's username is: $GITHUB_ACTOR"
          echo "GitHub SHA: $GITHUB_SHA"

      - name: post to google chat
        if: ${{ github.event_name == 'push' }}
        run: |
          env | grep GITHUB
          cat $(printenv GITHUB_EVENT_PATH)
          echo $(jq -r '.repository.name' $GITHUB_EVENT_PATH)
          echo $(jq -r '.repository.html_url' $GITHUB_EVENT_PATH)
          echo "$GITHUB_TRIGGERING_ACTOR"
          # GITHUB_TRIGGERING_ACTOR = ${{ github.triggering_actor }}
          # curl -X POST \
          #   -H 'Content-Type: application/json' \
          #   -d '{"text": "[TEST] ${{ github.event.repository.name }} : ${{ github.triggering_actor }} created new releases - see ${{ github.event.repository.html_url }}/releases"}' \
          #   '${{ secrets.GOOGLECHAT_PIPELINE_ANNOUNCEMENTS_WEBHOOK }}'


          curl https://get.pnpm.io/install.sh | ENV="$HOME/.bashrc" PNPM_VERSION="9.15.4" SHELL="$(which bash)" bash -
          export PNPM_HOME=/home/runner/.local/share/pnpm
          export PATH=$PNPM_HOME:$PATH
          pnpm install --frozen-lockfile

          # compute changed packages
          mkdir -p ./tmp/release/
          pnpm changeset status --verbose --output ./tmp/release/status.json

          if [[ "${{ secrets.GOOGLECHAT_PIPELINE_ANNOUNCEMENTS_WEBHOOK }}" != '' ]]; then
            # use the triggering actor of the github event if available, otherwise use the git config user.name
            TRIGGERING_ACTOR="${GITHUB_TRIGGERING_ACTOR:-$(git config user.name)}"
            # use the repository name from the github event if available, otherwise use the repository name from the git config
            REPOSITORY_NAME=$( [[ $GITHUB_EVENT_PATH != '' ]] && jq -r '.repository.name' $GITHUB_EVENT_PATH || basename $(realpath .))
            # use the repository url from the github event if available, otherwise use the repository url from the git config
            REPOSITORY_URL=$( [[ $GITHUB_EVENT_PATH != '' ]] && echo "$(jq -r '.repository.html_url' $GITHUB_EVENT_PATH)/releases" || git remote get-url --push origin)
            # changed packages computed by changeset
            CHANGED_PACKAGES=$(jq -r '.releases[] | "\(.name)(\(.oldVersion)->\(.newVersion))"' ./tmp/release/status.json | paste -sd, -)
            curl -X POST \
              -H 'Content-Type: application/json' \
              -d "{\"text\": \"[TEST] ${REPOSITORY_NAME} : ${TRIGGERING_ACTOR} created new releases ${CHANGED_PACKAGES} - see ${REPOSITORY_URL}\"}" \
              '${{ secrets.GOOGLECHAT_PIPELINE_ANNOUNCEMENTS_WEBHOOK }}'
          else
            echo "::warning::skip sending google chat release announcement message : secrets GOOGLECHAT_PIPELINE_ANNOUNCEMENTS_WEBHOOK is not defined"
          fi

      # - name: Login to GitHub Container Registry
      #   uses: docker/login-action@v3
      #   with:
      #     registry: ghcr.io
      #     username: ${{ github.repository_owner }}
      #     password: ${{ secrets.GITHUB_TOKEN }}

      # - uses: './.github/shared/actions/devcontainer-shell-run'
      #   name: build_project
      #   with:
      #     runCmd: |
      #       pnpm install --frozen-lockfile

      #       export GITHUB_TOKEN="${{ secrets.GITHUB_TOKEN }}"
      #       # export GITHUB_REPOSITORY="${{ github.repository }}"

      #       pnpm release

      # - uses: './.github/shared/actions/devcontainer-shell-run'
      #   id: gather_workflow_artifacts
      #   name: gather_workflow_artifacts
      #   with:
      #     runCmd: |
      #       pnpm exec ./scripts/_get-workflow-artefacts.sh

      # - name: attach workflow artifacts
      #   uses: actions/upload-artifact@v4
      #   with:
      #     # see https://github.com/actions/upload-artifact/issues/424
      #     path: |-
      #       ${{ steps.gather_workflow_artifacts.outputs.runCmdOutput }}
